@model ChatModel

<div class="chat-container" style="height:70vh;">
    <!-- Sidebar for Chat List -->
    <div class="chat-list">
        <ul>
            @foreach (var chat in Model.Chats)
            {
                <li class="chat-item" data-chat-id="@chat.Id" onclick="loadChatMessages('@chat.Id.ToString()')">
                    @* <img src="@chat.ChatPhoto" alt="@chat.ChatName" class="chat-photo" /> *@
                    <span class="chat-name">@chat.ChatName</span>
                </li>
            }
        </ul>
    </div>

    <!-- Chat Messages Section -->
    <div class="chat-messages">
        <div id="messages-container" class="messages-container">

        </div>

        <!-- Message Input Section -->
        <div class="message-input">
            <input id="message-text" type="text" placeholder="Type a message..." />
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>
</div>

    <script>
        var connection;
        var conId; //bağlandığı id
        var groupName; //oda id
        $(document).ready(function () {
       
        // const connection = new signalR.HubConnectionBuilder().withUrl("/ChatHub").build();
        connection = new signalR.HubConnectionBuilder().withUrl("/ChatHub").build()

        connection.start();

        // $("#sendButton").click(() => {
        //     let message = $("#inputText").val();
        //     connection.invoke("SendMessageAsync", message, groupName);
        // });

        connection.on("ReceiveMessage", (message, userId) => {
            debugger;
            var style = '@Model.User.Id' == userId ? "justify-content-end" : "flex-start";
            var pStyle = '@Model.User.Id' == userId ? "" : "greenDiv";

            $('#messages-container')/* .append(message + '<br/>'); */
            // let chat = $("#chats");
            // chat
            .append(`<div class="d-flex flex-row ${style} mb-4 pt-1">
               <div id="over-wrap">
                       <p class="small p-2 me-3 mb-3 ${pStyle} text-white rounded-3 bg-warning">
                        ${message}
                    </p>
                </div>
                </div>`)
            scrollToBottom();
        });
        var state = $("#state");

        connection.on("GetConnectionId", id => {
            conId = id
        });
        // connection.on("UserJoined", id => {
        //     state.css("background-color", "green");
        //     state.css("color", "white");
        //     state.html(`${id} Joined`);
        //     state.fadeIn(2000, () => {
        //         setTimeout(() => {
        //             state.fadeOut(2000);
        //         }, 2000)
        //     });
        // });

        // connection.on("UserLeft", id => {
        //     debugger;
        //     state.css("background-color", "red");
        //     state.css("color", "white");
        //     state.html(`${id} Left`);
        //     state.fadeIn(2000, () => {
        //         setTimeout(() => {
        //             state.fadeOut(2000);
        //         }, 2000)
        //     });
        // });
        
    });
        

    function sendMessage() {
        const messageText = $('#message-text').val();
        if (!messageText.trim()) return;

        $('#message-text').val("");
        
        connection.invoke("SendMessageAsync", messageText, groupName, '@Model.User.Id');
    }
    function loadChatMessages(chatId) {
        const chatItems = document.querySelectorAll(".chat-item");
        chatItems.forEach(item => item.classList.remove("selected"));

        // Tıklanan elemanı işaretle
        const selectedItem = document.querySelector(`.chat-item[data-chat-id='${chatId}']`);
        if (selectedItem) {
            selectedItem.classList.add("selected");
        }

        $('#messages-container').empty();
        // var globalGroupName = chatId;
        groupName = chatId;
        let message = $("#inputText").val();
        // connection.on("GetConnectionId", id => {
        //     debugger;
        connection.invoke("AddNewGroup", conId, chatId)
        // });

        $.ajax({
            url: `/Chat/GetMessages?chatId=${chatId}`,
            method: 'GET',
            success: function (data) {
                $('#messages-container').html(data);
            }// Fetch chat messages via AJAX and update the messages container

        });
    }
    function scrollToBottom() {
        const chatContainer = document.getElementById('messages-container');
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }
</script>


<style>
    .chat-container {
        display: flex;
        width: 90%;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        background-color: #f8f9fa;
        display: flex;
        height: 100vh;
        overflow: hidden;
        border-radius: 10px; /* Chat container için border-radius ekledim */
    }

    /* Chat List (Sidebar) */
    .chat-list {
        width: 300px; /* Fixed width */
        background-color: #e9ecef;
        overflow-y: auto;
        border-right: 2px solid #ccc;
    }

    .chat-item {
        display: flex;
        align-items: center;
        padding: 15px;
        cursor: pointer;
        border-bottom: 1px solid #ddd;
        transition: background-color 0.3s;
    }

        .chat-item:hover {
            background-color: #d1ecf1;
        }

        .chat-item.selected {
            background-color: #007bff;
            color: white;
        }

    .chat-name {
        font-size: 16px;
        font-weight: bold;
    }

    /* Chat Messages Section */
    .chat-messages {
        flex: 1; /* Takes up the remaining space */
        display: flex;
        flex-direction: column;
        background-color: white;
        overflow-y: auto;
    }

    .messages-container {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        background-color: #f8f9fa;
    }

    .message {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
    }

    .own-message {
        background-color: #28a745;
        color: white;
        align-self: flex-end;
    }

    .other-message {
        background-color: #007bff;
        color: white;
        align-self: flex-start;
    }

    /* Message Input Section */
    .message-input {
        display: flex;
        padding: 15px;
        border-top: 2px solid #ccc;
        background-color: #e9ecef;
    }

    #message-text {
        flex: 1;
        padding: 12px;
        border: none;
        border-radius: 20px;
        font-size: 16px;
        background-color: #ffffff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    button {
        margin-left: 15px;
        padding: 12px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 20px;
        font-size: 16px;
        cursor: pointer;
    }

        button:hover {
            background-color: #0056b3;
        }

        button:active {
            transform: scale(0.98);
        }

    p {
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    #over-wrap {
        max-width: 60%;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .chat-item.selected {
        background-color: #007bff;
        color: white;
    }

    .greenDiv {
        background-color: darkcyan !important;
    }
</style>

